name: Tests

on:
  push:
    branches: '**'
    tags-ignore: '**'
  pull_request:

jobs:
  Static-Code-Checks:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          python3 -m pip install ioctl-opt paramiko types-paramiko pytest

      - name: Style Check With Ruff
        run: |
          python3 -m pip install ruff
          ruff check --config tests/.ruff.toml -- $( git ls-tree -r --name-only HEAD | 'grep' -E '[.]py$' )

      - name: Style Check With Black
        run: |
          python3 -m pip install black
          black -q --diff --line-length 120 --skip-string-normalization $( git ls-tree -r --name-only HEAD | 'grep' -E '[.]py$' ) > black.diff
          if [ -s black.diff ]; then
              cat black.diff
              exit 123
          fi

      - name: Lint With Codespell
        run: |
          python3 -m pip install codespell
          codespell $( git ls-tree -r --name-only HEAD | 'grep' -E '[.](py|md|txt|sh|yml)$' )

      - name: Lint With Flake8
        run: |
          python3 -m pip install flake8
          flake8 --config tests/.flake8 $( git ls-tree -r --name-only HEAD | 'grep' -E '[.]py$' )

      - name: Lint With Pylint
        run: |
          python3 -m pip install pylint
          pylint --rcfile tests/.pylintrc $( git ls-tree -r --name-only HEAD | 'grep' -E '[.]py$' ) | tee pylint.log
          ! 'egrep' ': E[0-9]{4}: ' pylint.log

      - name: Lint With Pytype
        run: |
          python3 -m pip install pytype
          pytype -d import-error $( git ls-tree -r --name-only HEAD | 'grep' -E '[.]py$' )

      - name: Lint With Mypy
        run: |
          yes | python3 -m pip install --upgrade-strategy eager --upgrade types-dataclasses mypy
          mypy --config-file tests/.mypy.ini $( git ls-tree -r --name-only HEAD | 'grep' -E '[.]py$' )

  Tests:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: ['macos-latest', 'ubuntu-latest']
        # https://endoflife.date/python
        python-version: ['3.9', '3.12', '3.13']
        include:
        - os: ubuntu-latest
          python-version: '3.14.0-alpha.0'
        - os: ubuntu-22.04
          python-version: '3.7'
        - os: ubuntu-22.04
          python-version: '3.8'

    env:
      MFUSEPY_CHECK_OVERRIDES: 1
    defaults:
      run:
        # This is especially important for windows because it seems to default to powershell
        shell: bash

    steps:
      - uses: actions/checkout@v4
        with:
          # We need one tag for testing the git mount.
          # This is BROKEN! God damn it. Is anything working at all...
          # https://github.com/actions/checkout/issues/1781
          fetch-tags: true

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies (Linux)
        if: startsWith( matrix.os, 'ubuntu' )
        run: |
          sudo apt-get -y install libfuse2 fuse3 wget

      - name: Install Dependencies (MacOS)
        if: startsWith( matrix.os, 'macos' )
        run: |
          brew install -q macfuse

      - name: Install pip Dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install --upgrade wheel
          python3 -m pip install --upgrade setuptools
          # https://github.com/pyca/pynacl/issues/839
          # https://github.com/pyca/pynacl/pull/848
          python3 -m pip install --upgrade git+https://github.com/pyca/pynacl.git
          python3 -m pip install --upgrade-strategy eager --upgrade twine build pytest ioctl-opt paramiko types-paramiko

      - name: Test Installation From Tarball
        run: |
          python3 -m build
          twine check dist/*
          python3 -m pip install "$( find dist -name '*.tar.gz' | head -1 )"[full]

      - name: Test Installation From Source
        run: |
          python3 -m pip install .

      - name: Test Import
        run: |
          python3 -c 'import mfusepy'

      - name: Examples
        run: |
          # Simply parsing the source runs the @overrides check!
          for file in examples/*.py; do
              python3 "$file" -h
          done

      - name: Unit Tests (FUSE 2)
        if: startsWith( matrix.os, 'ubuntu' )
        run: |
          python3 -c 'import mfusepy; assert mfusepy.fuse_version_major == 2'
          python3 -m pytest tests

      - name: Unit Tests (FUSE 3)
        if: startsWith( matrix.os, 'ubuntu' )
        run: |
          export FUSE_LIBRARY_PATH=$( dpkg -L libfuse3-3 | 'grep' -F .so | head -1 )
          python3 -c 'import mfusepy; assert mfusepy.fuse_version_major == 3'
          python3 -m pytest tests

      - name: Test Compatibility (Ratarmount)
        if: startsWith( matrix.os, 'ubuntu' )
        run: |
          python3 -m pip install ratarmount
          python3 -m pip install --force-reinstall .
          mkdir -p mounted-tar
          wget https://github.com/mxmlnkn/ratarmount/raw/refs/heads/master/tests/single-file.tar
          ratarmount single-file.tar mounted-tar
          [[ "$( cat mounted-tar/bar )" == "foo" ]]
          fusermount -u mounted-tar

      - name: Test Compatibility (ninfs)
        if: ${{ startsWith( matrix.os, 'ubuntu' ) && matrix.python-version != '3.7' }}
        run: |
          python3 -m pip install git+https://github.com/ihaveamac/ninfs.git@main
          python3 -m pip install --force-reinstall .
          mkdir -p mounted-3dsx
          wget https://github.com/videah/3dsfetch/raw/refs/heads/master/3dsfetch.3dsx
          ninfs threedsx 3dsfetch.3dsx mounted-3dsx
          [[ "$( md5sum mounted-3dsx/icon.smdh )" =~ "a3d784b6f20182ebdf964589cbf427c2" ]]
          fusermount -u mounted-3dsx
